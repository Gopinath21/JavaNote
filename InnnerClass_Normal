 Inner class:
            if object depends on another object that we go for Inner Class concept.
        Inner class types:
                          1)Normal Inner class( without static)
                          2)Method over Inner class
                          3)Annonimous inner class
                          4)static Inner class
                          
                          
1) Noraml Inner class:-
                    static member's or not allowed . if we do C.E.
                    
                    
                    
                    class Outer{
		int x=10;
		
		class Inner{
				int x=100;
		public void m1(){
					int x=1000;
				System.out.prinln(x);//1000
				System.out.println(this.x);//100
				System.out.println(Outer.this.x); //10
				System.out.println("Inner");
			}	
	}
		
public static void main(String args[]){
	Outer$Inner oi=new outer().new Inner();
			oi.m1();	
		}
	public void m(){
			Inner i=new Inner();
				i.m1();
	}


}


class Test{
		public static void main(String[] args){
				Outer$Inner oi=new Outer().new Inner();
					oi.m1();					
			}
}
=============================================
Outer class Applicable modifier : public , <default> , abstract ,final , strictfp.
Inner Class :                     private, protected , static.
=======================================================================================================================
2) Method local inner class:-
			This subsitution for nested methods. 
			.class format : Outer$1Inner.class
		Applicable modifers for method local inner class : final, abstract, strictfp .
		Imp Note:We cant access local variable of that method directlty o.w we will get C.E...if and if that is final variable then that variable can access.
======================
class Outer {
			int x=30;
			static int y=10;
	public void m(){
				int methodlcoalvaraiable=10;
				final int constantvalue=33;
			class Inner {
					
					public void m1(){
					
					System.out.println(x);
					System.out.println(y);					
		
					System.out.prinln(constantvalue);// 33
					System.out,println(methodlocalvariable); // C.E
					
					}
					public void sum(int x,int y){
					System.out.println(x+y);
						}	
			}
			Inner i=new Inner();
			i.sum(20,30);
			i.sum(4,3);
	}

		public static void main(String[] ar){
					Outer o=new Outer();
					o.m();
			}


}
======================================================================================
class Outer {
			int x=30;
			static int y=10;
	public static void m(){
					
			class Inner {
					
					public void m1(){
					
					System.out.println(x); C.E
					System.out.println(y);					




					}
					public void sum(int x,int y){
					System.out.println(x+y);
						}	
			}
			Inner i=new Inner();
			i.sum(20,30);
			i.sum(4,3);
	}

		public static void main(String[] ar){
					Outer o=new Outer();
					o.m();
			}


}
======================================================================
Annonimous Inner class :-

The main purpose of Anonious inner class is , one time usage .

1) 

================================================
class My{

public static void main(String ...args){

Thread t=new Thread(){

public void run(){

for(int i=0;i<100;i++)
System.out.prinlln("sairam");
}		

};
	t.start();
}

}



classs MyInt{

public static void main(String args[]){

		new Thread(new Runnable(){
		for(int i=0li<10;i++)
		System.out.println(i);

}).start();


for(int i=10;i<1000;i++)
System.out.println("this is frm main thread");
}

}



class InrIInter
{

		Runnable r=new Runnable(){
		public void run(){

		for(int i=10;i<100;i++)
		System.out.println(i);
                                }
					};
	Thread t =new Thread(r);
t.start();

for(int i=10;i<1000;i++)
System.out.println("this is frm main thread");
}
============================================================Static nested Class======================


class Outer {
		int x=10;
	static int y=20;
	static class Inner {
				public static void main(String args){
					System.out.println(x); // C.E
					System.out.println(y);
						Inner oi=new Inner();
						oi.m1();

				}
					public void m1(){
					System.out.println(x); // C.E
					System.out.println(y);
							}
					
			}

public void m2(){

		Outer.Inner i=new Inner();
			i.m1();
		}


public static void main(String... ares){

	Outer.Inner oi=new Inner();
		oi.m1();
			
	}

}


Class Demo{

		public static void main(String... ares){
			
				Outer.Inner oi=new Inner();
					Oi.m1();



				}
}
